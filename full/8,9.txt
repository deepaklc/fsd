8. For student and course models created in Lab experiment for Module2,
register admin interfaces, perform migrations and illustrate data entry through
admin forms
9. Develop a Model form for student that contains his topic chosen for project,
languages used and duration with a model called project

Urls.py - project level

from django.contrib import admin
from django.urls import path,include
urlpatterns = [
path('admin/', admin.site.urls),
path('',include('myapp.urls'))
]

Urls.py App level

from django.contrib import admin
from django.urls import path, re_path
from myapp.views import add_project

urlpatterns = [
path('add_project/', add_project),
]

Models.py

from django.db import models
from django.forms import ModelForm
# Create your models here.
class Meeting(models.Model):
	meeting_code=models.CharField(max_length=100)
	meeting_dt=models.DateField(auto_now_add=True)
	meeting_subject=models.CharField(max_length=100)
	meeting_np=models.IntegerField()
class Course(models.Model):
	course_code=models.CharField(max_length=40)
	course_name=models.CharField(max_length=100)
	course_credits=models.IntegerField(blank=True, null=True)
	def __str__(self):
		return self.course_name
class Student(models.Model):
	student_usn=models.CharField(max_length=20)
	student_name=models.CharField(max_length=100)
	student_sem=models.IntegerField()
	enrolment=models.ManyToManyField(Course)
	def __str__(self):
	return self.student_name+"("+self.student_usn+")"
class Project(models.Model):
	student=models.ForeignKey(Student,on_delete=models.CASCADE)
	ptopic=models.CharField(max_length=200)
	plangauges=models.CharField(max_length=200)
	pduration=models.IntegerField()
class ProjectReg(ModelForm):
	required_css_class="required"
class Meta:
	model=Project
	fields=['student','ptopic','plangauges','pduration']
admin.py
from django.contrib import admin
from .models import Student, Course,Meeting,Project,ProjectReg
admin.site.register(Student)
admin.site.register(Course)
admin.site.register(Meeting)
admin.site.register(Project)

views.py
from django.http import HttpResponse
from django.shortcuts import render
from myapp.models import Course, Meeting, ProjectReg, Student
def add_project(request):
	if request.method=="POST":
		form=ProjectReg(request.POST)
	if form.is_valid():
		form.save()
	return HttpResponse("<h1>Record inserted successfully</h1>")
	else:
		return HttpResponse("<h1>Record not inserted</h1>")
	else:
		form=ProjectReg()
	return render(request,"add_project.html",{"form":form})

in app folder
D:\FSD_lab_2024\lab9_new\myapp\templates\add_project.html
<html>
<form method="post" action="">
{% csrf_token %}
<table>
{{ form.as_table}}
<tr>
<td>
<input type="submit" value="Submit">
</td>
</tr>
</table>
</form>
</html

 Python manage.py makemigrations
 Python manage.py migrate
 Python manage.py createsuperuser
 Python manage.py runserver
http://127.0.0.1:8000/admin/ for data entry
127.0.0.1:8000/add_project/ for project execution